log4j.rootLogger=DEBUG, Console ,File ,DailyRollingFile ,RollingFile, DFile, EFILE

#Log4j提供的layout有以下几种
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  最常用
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#PatternLayout是我们以后推荐使用的，很灵活；
#有个ConversionPattern属性，灵活配置输出属性：
#%m 输出代码中指定的消息；
#%M 输出打印该条日志的方法名；
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
#%r 输出自应用启动到输出该log信息耗费的毫秒数；
#%c 输出所属的类目，通常就是所在类的全名；
#%t 输出产生该日志事件的线程名；
#%n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
#%l 输出日志事件的发生位置，及在代码中的行数；
 
#Console  
log4j.appender.Console=org.apache.log4j.ConsoleAppender  
log4j.appender.Console.layout=org.apache.log4j.PatternLayout  
log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n
    
#File
log4j.appender.File = org.apache.log4j.FileAppender
log4j.appender.File.File = D://log_file.log
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n
 
#DailyRollingFile
log4j.appender.DailyRollingFile = org.apache.log4j.DailyRollingFileAppender
log4j.appender.DailyRollingFile.File = D://log_dailyrollingfile.log
log4j.appender.DailyRollingFile.layout = org.apache.log4j.PatternLayout
log4j.appender.DailyRollingFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n
 
#RollingFile
log4j.appender.RollingFile = org.apache.log4j.RollingFileAppender
log4j.appender.RollingFile.File = D://log_rollingfile.log
log4j.appender.RollingFile.MaxFileSize=1KB
log4j.appender.RollingFile.MaxBackupIndex=3
log4j.appender.RollingFile.layout = org.apache.log4j.PatternLayout
log4j.appender.RollingFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n


#有时候我们需要把一些报错ERROR日志单独存到指定文件 ，这时候，Threshold属性就派上用场了；
#Threshold属性可以指定日志level 
#Log4j根据日志信息的重要程度，分OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#比如我们指定某个appender的Threshold为WARN，那这个appender输出的日志信息就是WARN级别以及WARN以上的级别； 
#假如我们指定的是ERROR，那这个就输出ERROR或者FATAL日志信息；
#当然这里有个提前  rootLogger里配置的level比如小于Threshold层级  否则无效 还是按照总的rootLogger里的level来输出，
#一般我们实际实用的话 rootLogger里配置DEBUG，然后某个文件专门存储ERRO日志，就配置下Threshold为ERROR，这个就是我们的最佳实践，不要乱七八糟瞎配置；

#DEBUGFile
log4j.appender.DFile = org.apache.log4j.FileAppender
log4j.appender.DFile.File = D://DEBUG.log
log4j.appender.DFile.layout = org.apache.log4j.PatternLayout
log4j.appender.DFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n
log4j.appender.DFile.Threshold = DEBUG

#ERRORFile
log4j.appender.EFILE = org.apache.log4j.FileAppender
log4j.appender.EFILE.File = D://ERROR.log
log4j.appender.EFILE.layout = org.apache.log4j.PatternLayout
log4j.appender.EFILE.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n
log4j.appender.EFILE.Threshold = ERROR

